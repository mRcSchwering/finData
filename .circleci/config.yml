version: 2
jobs:

  build:
    environment:
      build: mrcschwering/cci-findata_build:latest
    docker:
      - image: docker:18.03.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build finData
          command: docker build -t "$build" .
      - run:
          name: Push finData build
          command: |
            docker login -u="$DOCKERHUB_USER" -p="$DOCKERHUB_PASS"
            docker push "$build"

  unittest-dbconnector:
    docker:
      - image: mrcschwering/cci-findata_build:latest
    working_directory: /app
    steps:
      - run: python3 -m unittest discover -s finData -v -p "*test_dbconnector*"

  unittest-schema:
    docker:
      - image: mrcschwering/cci-findata_build:latest
    working_directory: /app
    steps:
      - run: python3 -m unittest discover -s finData -v -p "*test_schema*"

  unittest-stock:
    docker:
      - image: mrcschwering/cci-findata_build:latest
    working_directory: /app
    steps:
      - run: python3 -m unittest discover -s finData -v -p "*test_stock*"

  unittest-history:
    docker:
      - image: mrcschwering/cci-findata_build:latest
    working_directory: /app
    steps:
      - run: python3 -m unittest discover -s finData -v -p "*test_history*"

  unittest-scraper:
    docker:
      - image: mrcschwering/cci-findata_build:latest
    working_directory: /app
    steps:
      - run: python3 -m unittest discover -s finData -v -p "*test_scrape*"

  unittest-connector:
    docker:
      - image: mrcschwering/cci-findata_build:latest
    working_directory: /app
    steps:
      - run: python3 -m unittest discover -s finData -v -p "*test_connect*"

  integration-tests:
    docker:
      - image: mrcschwering/docker-compose-git:latest
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Start Containers
          command: |
            docker-compose -f 'docker-compose_build.yml' up -d
            sleep 5
            docker-compose -f 'docker-compose_build.yml' ps
      - run:
          name: Create DB using psql client
          command: |
            docker-compose -f 'docker-compose_build.yml' run \
              client "CREATE DATABASE findata;"
            docker-compose -f 'docker-compose_build.yml' run \
              client "\l"
      - run:
          name: Create test schema and fill with data
          command: |
            docker-compose -f 'docker-compose_build.yml' run \
              app test.create_testdatabase \
              --db findata \
              --schema testdb \
              --host server \
              --port 5432 \
              --user postgres
      - run:
          name: Run Integration Tests
          command: |
            docker-compose -f 'docker-compose_build.yml' run \
              -e ALPHAVANTAGE_API_KEY="$ALPHAVANTAGE_API_KEY" \
              app test.integration_test \
              --db findata \
              --schema testdb \
              --host server \
              --port 5432 \
              --user postgres

  deploy:
    environment:
      build: mrcschwering/cci-findata_build:latest
      deploy: "mrcschwering/cci-findata_deploy:latest"
    docker:
      - image: docker:18.03.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Pull and tag tested image as deploy
          command: |
            docker pull "$build"
            docker tag "$build" "$deploy"
      - run:
          name: Push deploy
          command: |
            docker login -u="$DOCKERHUB_USER" -p="$DOCKERHUB_PASS"
            docker push "$deploy"

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - unittest-scraper:
          requires:
            - build
      - unittest-connector:
          requires:
            - build
      - unittest-dbconnector:
          requires:
            - build
      - unittest-schema:
          requires:
            - build
      - unittest-stock:
          requires:
            - build
      - unittest-history:
          requires:
            - build
      - integration-tests:
          requires:
            - unittest-scraper
            - unittest-connector
            - unittest-dbconnector
            - unittest-schema
            - unittest-stock
            - unittest-history
      - deploy:
          requires:
            - integration-tests
